-- Drop existing tables to ensure a clean setup
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS images CASCADE;
DROP TABLE IF EXISTS site_content CASCADE;
DROP TABLE IF EXISTS faqs CASCADE;

-- Create a table for products
CREATE TABLE products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC NOT NULL,
  weight TEXT,
  image_url TEXT
);

-- Create a table for page-specific text content
CREATE TABLE site_content (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section TEXT NOT NULL,
  element TEXT NOT NULL,
  content TEXT,
  UNIQUE (section, element)
);

-- RLS for site_content table
ALTER TABLE site_content ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Allow public read access to site_content" ON site_content;
CREATE POLICY "Allow public read access to site_content" ON site_content
FOR SELECT
USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to insert site_content" ON site_content;
CREATE POLICY "Allow authenticated users to insert site_content" ON site_content
FOR INSERT TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to update site_content" ON site_content;
CREATE POLICY "Allow authenticated users to update site_content" ON site_content
FOR UPDATE TO authenticated
USING (true) WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to delete site_content" ON site_content;
CREATE POLICY "Allow authenticated users to delete site_content" ON site_content
FOR DELETE TO authenticated
USING (true);


-- Create a table for images
CREATE TABLE images (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  section TEXT,
  url TEXT NOT NULL
);

-- RLS for images table
ALTER TABLE images ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to images" ON images;
CREATE POLICY "Allow public read access to images" ON images
FOR SELECT
USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to insert images" ON images;
CREATE POLICY "Allow authenticated users to insert images" ON images
FOR INSERT TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to update images" ON images;
CREATE POLICY "Allow authenticated users to update images" ON images
FOR UPDATE TO authenticated
USING (true) WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to delete images" ON images;
CREATE POLICY "Allow authenticated users to delete images" ON images
FOR DELETE TO authenticated
USING (true);

-- Create a table for FAQs
CREATE TABLE faqs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question TEXT NOT NULL,
  answer TEXT NOT NULL
);

-- RLS for faqs table
ALTER TABLE faqs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to faqs" ON faqs;
CREATE POLICY "Allow public read access to faqs" ON faqs
FOR SELECT
USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to insert faqs" ON faqs;
CREATE POLICY "Allow authenticated users to insert faqs" ON faqs
FOR INSERT TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to update faqs" ON faqs;
CREATE POLICY "Allow authenticated users to update faqs" ON faqs
FOR UPDATE TO authenticated
USING (true) WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to delete faqs" ON faqs;
CREATE POLICY "Allow authenticated users to delete faqs" ON faqs
FOR DELETE TO authenticated
USING (true);

-- Insert placeholder data for faq page title and subtitle
INSERT INTO site_content (section, element, content)
VALUES ('faq_page', 'title', 'Preguntas Frecuentes'), ('faq_page', 'subtitle', 'Encuentra respuestas a las preguntas más comunes.')
ON CONFLICT (section, element) DO NOTHING;

-- Insert placeholder data for contact page title and subtitle
INSERT INTO site_content (section, element, content)
VALUES ('contact_page', 'title', 'Contáctanos'), ('contact_page', 'subtitle', 'Estamos aquí para ayudarte. Ponte en contacto con nosotros a través de cualquiera de los siguientes medios.')
ON CONFLICT (section, element) DO NOTHING;

-- Create a bucket for images
INSERT INTO storage.buckets (id, name, public)
VALUES ('website_images', 'website_images', true)
ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, public = EXCLUDED.public;

-- Policies for storage.objects
DROP POLICY IF EXISTS "Allow public read access to images" ON storage.objects;
CREATE POLICY "Allow public read access to images" ON storage.objects
FOR SELECT
USING ( bucket_id = 'website_images' );

DROP POLICY IF EXISTS "Allow authenticated users to upload images" ON storage.objects;
CREATE POLICY "Allow authenticated users to upload images" ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK ( bucket_id = 'website_images' );

DROP POLICY IF EXISTS "Allow authenticated users to update their own images" ON storage.objects;
CREATE POLICY "Allow authenticated users to update their own images" ON storage.objects
FOR UPDATE
TO authenticated
USING ( bucket_id = 'website_images' AND auth.uid() = owner );

DROP POLICY IF EXISTS "Allow authenticated users to delete their own images" ON storage.objects;
CREATE POLICY "Allow authenticated users to delete their own images" ON storage.objects
FOR DELETE
TO authenticated
USING ( bucket_id = 'website_images' AND auth.uid() = owner );